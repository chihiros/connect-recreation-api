// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/predicate"
	"app/ent/recreation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecreationUpdate is the builder for updating Recreation entities.
type RecreationUpdate struct {
	config
	hooks    []Hook
	mutation *RecreationMutation
}

// Where appends a list predicates to the RecreationUpdate builder.
func (ru *RecreationUpdate) Where(ps ...predicate.Recreation) *RecreationUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUsername sets the "username" field.
func (ru *RecreationUpdate) SetUsername(s string) *RecreationUpdate {
	ru.mutation.SetUsername(s)
	return ru
}

// SetMail sets the "mail" field.
func (ru *RecreationUpdate) SetMail(s string) *RecreationUpdate {
	ru.mutation.SetMail(s)
	return ru
}

// SetPrefectureID sets the "prefecture_id" field.
func (ru *RecreationUpdate) SetPrefectureID(i int) *RecreationUpdate {
	ru.mutation.ResetPrefectureID()
	ru.mutation.SetPrefectureID(i)
	return ru
}

// AddPrefectureID adds i to the "prefecture_id" field.
func (ru *RecreationUpdate) AddPrefectureID(i int) *RecreationUpdate {
	ru.mutation.AddPrefectureID(i)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RecreationUpdate) SetCreatedAt(t time.Time) *RecreationUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RecreationUpdate) SetNillableCreatedAt(t *time.Time) *RecreationUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RecreationUpdate) SetUpdatedAt(t time.Time) *RecreationUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *RecreationUpdate) SetNillableUpdatedAt(t *time.Time) *RecreationUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// Mutation returns the RecreationMutation object of the builder.
func (ru *RecreationUpdate) Mutation() *RecreationMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecreationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RecreationMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecreationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecreationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecreationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RecreationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(recreation.Table, recreation.Columns, sqlgraph.NewFieldSpec(recreation.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Username(); ok {
		_spec.SetField(recreation.FieldUsername, field.TypeString, value)
	}
	if value, ok := ru.mutation.Mail(); ok {
		_spec.SetField(recreation.FieldMail, field.TypeString, value)
	}
	if value, ok := ru.mutation.PrefectureID(); ok {
		_spec.SetField(recreation.FieldPrefectureID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedPrefectureID(); ok {
		_spec.AddField(recreation.FieldPrefectureID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(recreation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(recreation.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recreation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RecreationUpdateOne is the builder for updating a single Recreation entity.
type RecreationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecreationMutation
}

// SetUsername sets the "username" field.
func (ruo *RecreationUpdateOne) SetUsername(s string) *RecreationUpdateOne {
	ruo.mutation.SetUsername(s)
	return ruo
}

// SetMail sets the "mail" field.
func (ruo *RecreationUpdateOne) SetMail(s string) *RecreationUpdateOne {
	ruo.mutation.SetMail(s)
	return ruo
}

// SetPrefectureID sets the "prefecture_id" field.
func (ruo *RecreationUpdateOne) SetPrefectureID(i int) *RecreationUpdateOne {
	ruo.mutation.ResetPrefectureID()
	ruo.mutation.SetPrefectureID(i)
	return ruo
}

// AddPrefectureID adds i to the "prefecture_id" field.
func (ruo *RecreationUpdateOne) AddPrefectureID(i int) *RecreationUpdateOne {
	ruo.mutation.AddPrefectureID(i)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RecreationUpdateOne) SetCreatedAt(t time.Time) *RecreationUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RecreationUpdateOne) SetNillableCreatedAt(t *time.Time) *RecreationUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RecreationUpdateOne) SetUpdatedAt(t time.Time) *RecreationUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *RecreationUpdateOne) SetNillableUpdatedAt(t *time.Time) *RecreationUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// Mutation returns the RecreationMutation object of the builder.
func (ruo *RecreationUpdateOne) Mutation() *RecreationMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RecreationUpdate builder.
func (ruo *RecreationUpdateOne) Where(ps ...predicate.Recreation) *RecreationUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecreationUpdateOne) Select(field string, fields ...string) *RecreationUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Recreation entity.
func (ruo *RecreationUpdateOne) Save(ctx context.Context) (*Recreation, error) {
	return withHooks[*Recreation, RecreationMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecreationUpdateOne) SaveX(ctx context.Context) *Recreation {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecreationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecreationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RecreationUpdateOne) sqlSave(ctx context.Context) (_node *Recreation, err error) {
	_spec := sqlgraph.NewUpdateSpec(recreation.Table, recreation.Columns, sqlgraph.NewFieldSpec(recreation.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Recreation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recreation.FieldID)
		for _, f := range fields {
			if !recreation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recreation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Username(); ok {
		_spec.SetField(recreation.FieldUsername, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Mail(); ok {
		_spec.SetField(recreation.FieldMail, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PrefectureID(); ok {
		_spec.SetField(recreation.FieldPrefectureID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedPrefectureID(); ok {
		_spec.AddField(recreation.FieldPrefectureID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(recreation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(recreation.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Recreation{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recreation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
