// Code generated by ent, DO NOT EDIT.

package recreation

import (
	"app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUserID, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUUID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldContent, v))
}

// TargetNumber applies equality check predicate on the "target_number" field. It's identical to TargetNumberEQ.
func TargetNumber(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldTargetNumber, v))
}

// RequredTime applies equality check predicate on the "requred_time" field. It's identical to RequredTimeEQ.
func RequredTime(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldRequredTime, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldUserID, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldUUID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContainsFold(FieldContent, v))
}

// TargetNumberEQ applies the EQ predicate on the "target_number" field.
func TargetNumberEQ(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldTargetNumber, v))
}

// TargetNumberNEQ applies the NEQ predicate on the "target_number" field.
func TargetNumberNEQ(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldTargetNumber, v))
}

// TargetNumberIn applies the In predicate on the "target_number" field.
func TargetNumberIn(vs ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldTargetNumber, vs...))
}

// TargetNumberNotIn applies the NotIn predicate on the "target_number" field.
func TargetNumberNotIn(vs ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldTargetNumber, vs...))
}

// TargetNumberGT applies the GT predicate on the "target_number" field.
func TargetNumberGT(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldTargetNumber, v))
}

// TargetNumberGTE applies the GTE predicate on the "target_number" field.
func TargetNumberGTE(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldTargetNumber, v))
}

// TargetNumberLT applies the LT predicate on the "target_number" field.
func TargetNumberLT(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldTargetNumber, v))
}

// TargetNumberLTE applies the LTE predicate on the "target_number" field.
func TargetNumberLTE(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldTargetNumber, v))
}

// RequredTimeEQ applies the EQ predicate on the "requred_time" field.
func RequredTimeEQ(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldRequredTime, v))
}

// RequredTimeNEQ applies the NEQ predicate on the "requred_time" field.
func RequredTimeNEQ(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldRequredTime, v))
}

// RequredTimeIn applies the In predicate on the "requred_time" field.
func RequredTimeIn(vs ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldRequredTime, vs...))
}

// RequredTimeNotIn applies the NotIn predicate on the "requred_time" field.
func RequredTimeNotIn(vs ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldRequredTime, vs...))
}

// RequredTimeGT applies the GT predicate on the "requred_time" field.
func RequredTimeGT(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldRequredTime, v))
}

// RequredTimeGTE applies the GTE predicate on the "requred_time" field.
func RequredTimeGTE(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldRequredTime, v))
}

// RequredTimeLT applies the LT predicate on the "requred_time" field.
func RequredTimeLT(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldRequredTime, v))
}

// RequredTimeLTE applies the LTE predicate on the "requred_time" field.
func RequredTimeLTE(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldRequredTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Recreation) predicate.Recreation {
	return predicate.Recreation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Recreation) predicate.Recreation {
	return predicate.Recreation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recreation) predicate.Recreation {
	return predicate.Recreation(func(s *sql.Selector) {
		p(s.Not())
	})
}
