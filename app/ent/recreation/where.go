// Code generated by ent, DO NOT EDIT.

package recreation

import (
	"app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUsername, v))
}

// Mail applies equality check predicate on the "mail" field. It's identical to MailEQ.
func Mail(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldMail, v))
}

// PrefectureID applies equality check predicate on the "prefecture_id" field. It's identical to PrefectureIDEQ.
func PrefectureID(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldPrefectureID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldUID, v))
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContains(FieldUID, v))
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasPrefix(FieldUID, v))
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasSuffix(FieldUID, v))
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEqualFold(FieldUID, v))
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContainsFold(FieldUID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContainsFold(FieldUsername, v))
}

// MailEQ applies the EQ predicate on the "mail" field.
func MailEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldMail, v))
}

// MailNEQ applies the NEQ predicate on the "mail" field.
func MailNEQ(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldMail, v))
}

// MailIn applies the In predicate on the "mail" field.
func MailIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldMail, vs...))
}

// MailNotIn applies the NotIn predicate on the "mail" field.
func MailNotIn(vs ...string) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldMail, vs...))
}

// MailGT applies the GT predicate on the "mail" field.
func MailGT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldMail, v))
}

// MailGTE applies the GTE predicate on the "mail" field.
func MailGTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldMail, v))
}

// MailLT applies the LT predicate on the "mail" field.
func MailLT(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldMail, v))
}

// MailLTE applies the LTE predicate on the "mail" field.
func MailLTE(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldMail, v))
}

// MailContains applies the Contains predicate on the "mail" field.
func MailContains(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContains(FieldMail, v))
}

// MailHasPrefix applies the HasPrefix predicate on the "mail" field.
func MailHasPrefix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasPrefix(FieldMail, v))
}

// MailHasSuffix applies the HasSuffix predicate on the "mail" field.
func MailHasSuffix(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldHasSuffix(FieldMail, v))
}

// MailEqualFold applies the EqualFold predicate on the "mail" field.
func MailEqualFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldEqualFold(FieldMail, v))
}

// MailContainsFold applies the ContainsFold predicate on the "mail" field.
func MailContainsFold(v string) predicate.Recreation {
	return predicate.Recreation(sql.FieldContainsFold(FieldMail, v))
}

// PrefectureIDEQ applies the EQ predicate on the "prefecture_id" field.
func PrefectureIDEQ(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldPrefectureID, v))
}

// PrefectureIDNEQ applies the NEQ predicate on the "prefecture_id" field.
func PrefectureIDNEQ(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldPrefectureID, v))
}

// PrefectureIDIn applies the In predicate on the "prefecture_id" field.
func PrefectureIDIn(vs ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldPrefectureID, vs...))
}

// PrefectureIDNotIn applies the NotIn predicate on the "prefecture_id" field.
func PrefectureIDNotIn(vs ...int) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldPrefectureID, vs...))
}

// PrefectureIDGT applies the GT predicate on the "prefecture_id" field.
func PrefectureIDGT(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldPrefectureID, v))
}

// PrefectureIDGTE applies the GTE predicate on the "prefecture_id" field.
func PrefectureIDGTE(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldPrefectureID, v))
}

// PrefectureIDLT applies the LT predicate on the "prefecture_id" field.
func PrefectureIDLT(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldPrefectureID, v))
}

// PrefectureIDLTE applies the LTE predicate on the "prefecture_id" field.
func PrefectureIDLTE(v int) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldPrefectureID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Recreation {
	return predicate.Recreation(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Recreation) predicate.Recreation {
	return predicate.Recreation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Recreation) predicate.Recreation {
	return predicate.Recreation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recreation) predicate.Recreation {
	return predicate.Recreation(func(s *sql.Selector) {
		p(s.Not())
	})
}
