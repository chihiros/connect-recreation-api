// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/predicate"
	"app/ent/profile"
	"app/ent/recreation"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProfile    = "Profile"
	TypeRecreation = "Recreation"
)

// ProfileMutation represents an operation that mutates the Profile nodes in the graph.
type ProfileMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	uuid               *uuid.UUID
	nickname           *string
	icon_url           *string
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	recreations        map[int]struct{}
	removedrecreations map[int]struct{}
	clearedrecreations bool
	done               bool
	oldValue           func(context.Context) (*Profile, error)
	predicates         []predicate.Profile
}

var _ ent.Mutation = (*ProfileMutation)(nil)

// profileOption allows management of the mutation configuration using functional options.
type profileOption func(*ProfileMutation)

// newProfileMutation creates new mutation for the Profile entity.
func newProfileMutation(c config, op Op, opts ...profileOption) *ProfileMutation {
	m := &ProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfileID sets the ID field of the mutation.
func withProfileID(id int) profileOption {
	return func(m *ProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *Profile
		)
		m.oldValue = func(ctx context.Context) (*Profile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfile sets the old Profile of the mutation.
func withProfile(node *Profile) profileOption {
	return func(m *ProfileMutation) {
		m.oldValue = func(context.Context) (*Profile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Profile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUUID sets the "uuid" field.
func (m *ProfileMutation) SetUUID(u uuid.UUID) {
	m.uuid = &u
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ProfileMutation) UUID() (r uuid.UUID, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldUUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ProfileMutation) ResetUUID() {
	m.uuid = nil
}

// SetNickname sets the "nickname" field.
func (m *ProfileMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *ProfileMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *ProfileMutation) ResetNickname() {
	m.nickname = nil
}

// SetIconURL sets the "icon_url" field.
func (m *ProfileMutation) SetIconURL(s string) {
	m.icon_url = &s
}

// IconURL returns the value of the "icon_url" field in the mutation.
func (m *ProfileMutation) IconURL() (r string, exists bool) {
	v := m.icon_url
	if v == nil {
		return
	}
	return *v, true
}

// OldIconURL returns the old "icon_url" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldIconURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIconURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIconURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIconURL: %w", err)
	}
	return oldValue.IconURL, nil
}

// ClearIconURL clears the value of the "icon_url" field.
func (m *ProfileMutation) ClearIconURL() {
	m.icon_url = nil
	m.clearedFields[profile.FieldIconURL] = struct{}{}
}

// IconURLCleared returns if the "icon_url" field was cleared in this mutation.
func (m *ProfileMutation) IconURLCleared() bool {
	_, ok := m.clearedFields[profile.FieldIconURL]
	return ok
}

// ResetIconURL resets all changes to the "icon_url" field.
func (m *ProfileMutation) ResetIconURL() {
	m.icon_url = nil
	delete(m.clearedFields, profile.FieldIconURL)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProfileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProfileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProfileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProfileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProfileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProfileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddRecreationIDs adds the "recreations" edge to the Recreation entity by ids.
func (m *ProfileMutation) AddRecreationIDs(ids ...int) {
	if m.recreations == nil {
		m.recreations = make(map[int]struct{})
	}
	for i := range ids {
		m.recreations[ids[i]] = struct{}{}
	}
}

// ClearRecreations clears the "recreations" edge to the Recreation entity.
func (m *ProfileMutation) ClearRecreations() {
	m.clearedrecreations = true
}

// RecreationsCleared reports if the "recreations" edge to the Recreation entity was cleared.
func (m *ProfileMutation) RecreationsCleared() bool {
	return m.clearedrecreations
}

// RemoveRecreationIDs removes the "recreations" edge to the Recreation entity by IDs.
func (m *ProfileMutation) RemoveRecreationIDs(ids ...int) {
	if m.removedrecreations == nil {
		m.removedrecreations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recreations, ids[i])
		m.removedrecreations[ids[i]] = struct{}{}
	}
}

// RemovedRecreations returns the removed IDs of the "recreations" edge to the Recreation entity.
func (m *ProfileMutation) RemovedRecreationsIDs() (ids []int) {
	for id := range m.removedrecreations {
		ids = append(ids, id)
	}
	return
}

// RecreationsIDs returns the "recreations" edge IDs in the mutation.
func (m *ProfileMutation) RecreationsIDs() (ids []int) {
	for id := range m.recreations {
		ids = append(ids, id)
	}
	return
}

// ResetRecreations resets all changes to the "recreations" edge.
func (m *ProfileMutation) ResetRecreations() {
	m.recreations = nil
	m.clearedrecreations = false
	m.removedrecreations = nil
}

// Where appends a list predicates to the ProfileMutation builder.
func (m *ProfileMutation) Where(ps ...predicate.Profile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Profile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Profile).
func (m *ProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfileMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.uuid != nil {
		fields = append(fields, profile.FieldUUID)
	}
	if m.nickname != nil {
		fields = append(fields, profile.FieldNickname)
	}
	if m.icon_url != nil {
		fields = append(fields, profile.FieldIconURL)
	}
	if m.created_at != nil {
		fields = append(fields, profile.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, profile.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldUUID:
		return m.UUID()
	case profile.FieldNickname:
		return m.Nickname()
	case profile.FieldIconURL:
		return m.IconURL()
	case profile.FieldCreatedAt:
		return m.CreatedAt()
	case profile.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profile.FieldUUID:
		return m.OldUUID(ctx)
	case profile.FieldNickname:
		return m.OldNickname(ctx)
	case profile.FieldIconURL:
		return m.OldIconURL(ctx)
	case profile.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case profile.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Profile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profile.FieldUUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case profile.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case profile.FieldIconURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIconURL(v)
		return nil
	case profile.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case profile.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Profile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profile.FieldIconURL) {
		fields = append(fields, profile.FieldIconURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfileMutation) ClearField(name string) error {
	switch name {
	case profile.FieldIconURL:
		m.ClearIconURL()
		return nil
	}
	return fmt.Errorf("unknown Profile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfileMutation) ResetField(name string) error {
	switch name {
	case profile.FieldUUID:
		m.ResetUUID()
		return nil
	case profile.FieldNickname:
		m.ResetNickname()
		return nil
	case profile.FieldIconURL:
		m.ResetIconURL()
		return nil
	case profile.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case profile.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recreations != nil {
		edges = append(edges, profile.EdgeRecreations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeRecreations:
		ids := make([]ent.Value, 0, len(m.recreations))
		for id := range m.recreations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecreations != nil {
		edges = append(edges, profile.EdgeRecreations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeRecreations:
		ids := make([]ent.Value, 0, len(m.removedrecreations))
		for id := range m.removedrecreations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecreations {
		edges = append(edges, profile.EdgeRecreations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case profile.EdgeRecreations:
		return m.clearedrecreations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Profile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfileMutation) ResetEdge(name string) error {
	switch name {
	case profile.EdgeRecreations:
		m.ResetRecreations()
		return nil
	}
	return fmt.Errorf("unknown Profile edge %s", name)
}

// RecreationMutation represents an operation that mutates the Recreation nodes in the graph.
type RecreationMutation struct {
	config
	op               Op
	typ              string
	id               *int
	user_id          *uuid.UUID
	recreation_id    *uuid.UUID
	genre            *[]int
	appendgenre      []int
	title            *string
	content          *string
	youtube_id       *string
	target_number    *int
	addtarget_number *int
	required_time    *int
	addrequired_time *int
	publish          *bool
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	profile          *int
	clearedprofile   bool
	done             bool
	oldValue         func(context.Context) (*Recreation, error)
	predicates       []predicate.Recreation
}

var _ ent.Mutation = (*RecreationMutation)(nil)

// recreationOption allows management of the mutation configuration using functional options.
type recreationOption func(*RecreationMutation)

// newRecreationMutation creates new mutation for the Recreation entity.
func newRecreationMutation(c config, op Op, opts ...recreationOption) *RecreationMutation {
	m := &RecreationMutation{
		config:        c,
		op:            op,
		typ:           TypeRecreation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecreationID sets the ID field of the mutation.
func withRecreationID(id int) recreationOption {
	return func(m *RecreationMutation) {
		var (
			err   error
			once  sync.Once
			value *Recreation
		)
		m.oldValue = func(ctx context.Context) (*Recreation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Recreation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecreation sets the old Recreation of the mutation.
func withRecreation(node *Recreation) recreationOption {
	return func(m *RecreationMutation) {
		m.oldValue = func(context.Context) (*Recreation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecreationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecreationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecreationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecreationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Recreation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *RecreationMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *RecreationMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *RecreationMutation) ResetUserID() {
	m.user_id = nil
}

// SetRecreationID sets the "recreation_id" field.
func (m *RecreationMutation) SetRecreationID(u uuid.UUID) {
	m.recreation_id = &u
}

// RecreationID returns the value of the "recreation_id" field in the mutation.
func (m *RecreationMutation) RecreationID() (r uuid.UUID, exists bool) {
	v := m.recreation_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRecreationID returns the old "recreation_id" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldRecreationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecreationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecreationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecreationID: %w", err)
	}
	return oldValue.RecreationID, nil
}

// ResetRecreationID resets all changes to the "recreation_id" field.
func (m *RecreationMutation) ResetRecreationID() {
	m.recreation_id = nil
}

// SetGenre sets the "genre" field.
func (m *RecreationMutation) SetGenre(i []int) {
	m.genre = &i
	m.appendgenre = nil
}

// Genre returns the value of the "genre" field in the mutation.
func (m *RecreationMutation) Genre() (r []int, exists bool) {
	v := m.genre
	if v == nil {
		return
	}
	return *v, true
}

// OldGenre returns the old "genre" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldGenre(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenre is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenre requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenre: %w", err)
	}
	return oldValue.Genre, nil
}

// AppendGenre adds i to the "genre" field.
func (m *RecreationMutation) AppendGenre(i []int) {
	m.appendgenre = append(m.appendgenre, i...)
}

// AppendedGenre returns the list of values that were appended to the "genre" field in this mutation.
func (m *RecreationMutation) AppendedGenre() ([]int, bool) {
	if len(m.appendgenre) == 0 {
		return nil, false
	}
	return m.appendgenre, true
}

// ResetGenre resets all changes to the "genre" field.
func (m *RecreationMutation) ResetGenre() {
	m.genre = nil
	m.appendgenre = nil
}

// SetTitle sets the "title" field.
func (m *RecreationMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *RecreationMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *RecreationMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *RecreationMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *RecreationMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *RecreationMutation) ResetContent() {
	m.content = nil
}

// SetYoutubeID sets the "youtube_id" field.
func (m *RecreationMutation) SetYoutubeID(s string) {
	m.youtube_id = &s
}

// YoutubeID returns the value of the "youtube_id" field in the mutation.
func (m *RecreationMutation) YoutubeID() (r string, exists bool) {
	v := m.youtube_id
	if v == nil {
		return
	}
	return *v, true
}

// OldYoutubeID returns the old "youtube_id" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldYoutubeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYoutubeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYoutubeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYoutubeID: %w", err)
	}
	return oldValue.YoutubeID, nil
}

// ClearYoutubeID clears the value of the "youtube_id" field.
func (m *RecreationMutation) ClearYoutubeID() {
	m.youtube_id = nil
	m.clearedFields[recreation.FieldYoutubeID] = struct{}{}
}

// YoutubeIDCleared returns if the "youtube_id" field was cleared in this mutation.
func (m *RecreationMutation) YoutubeIDCleared() bool {
	_, ok := m.clearedFields[recreation.FieldYoutubeID]
	return ok
}

// ResetYoutubeID resets all changes to the "youtube_id" field.
func (m *RecreationMutation) ResetYoutubeID() {
	m.youtube_id = nil
	delete(m.clearedFields, recreation.FieldYoutubeID)
}

// SetTargetNumber sets the "target_number" field.
func (m *RecreationMutation) SetTargetNumber(i int) {
	m.target_number = &i
	m.addtarget_number = nil
}

// TargetNumber returns the value of the "target_number" field in the mutation.
func (m *RecreationMutation) TargetNumber() (r int, exists bool) {
	v := m.target_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetNumber returns the old "target_number" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldTargetNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetNumber: %w", err)
	}
	return oldValue.TargetNumber, nil
}

// AddTargetNumber adds i to the "target_number" field.
func (m *RecreationMutation) AddTargetNumber(i int) {
	if m.addtarget_number != nil {
		*m.addtarget_number += i
	} else {
		m.addtarget_number = &i
	}
}

// AddedTargetNumber returns the value that was added to the "target_number" field in this mutation.
func (m *RecreationMutation) AddedTargetNumber() (r int, exists bool) {
	v := m.addtarget_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetTargetNumber resets all changes to the "target_number" field.
func (m *RecreationMutation) ResetTargetNumber() {
	m.target_number = nil
	m.addtarget_number = nil
}

// SetRequiredTime sets the "required_time" field.
func (m *RecreationMutation) SetRequiredTime(i int) {
	m.required_time = &i
	m.addrequired_time = nil
}

// RequiredTime returns the value of the "required_time" field in the mutation.
func (m *RecreationMutation) RequiredTime() (r int, exists bool) {
	v := m.required_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRequiredTime returns the old "required_time" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldRequiredTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequiredTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequiredTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequiredTime: %w", err)
	}
	return oldValue.RequiredTime, nil
}

// AddRequiredTime adds i to the "required_time" field.
func (m *RecreationMutation) AddRequiredTime(i int) {
	if m.addrequired_time != nil {
		*m.addrequired_time += i
	} else {
		m.addrequired_time = &i
	}
}

// AddedRequiredTime returns the value that was added to the "required_time" field in this mutation.
func (m *RecreationMutation) AddedRequiredTime() (r int, exists bool) {
	v := m.addrequired_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetRequiredTime resets all changes to the "required_time" field.
func (m *RecreationMutation) ResetRequiredTime() {
	m.required_time = nil
	m.addrequired_time = nil
}

// SetPublish sets the "publish" field.
func (m *RecreationMutation) SetPublish(b bool) {
	m.publish = &b
}

// Publish returns the value of the "publish" field in the mutation.
func (m *RecreationMutation) Publish() (r bool, exists bool) {
	v := m.publish
	if v == nil {
		return
	}
	return *v, true
}

// OldPublish returns the old "publish" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldPublish(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublish is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublish requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublish: %w", err)
	}
	return oldValue.Publish, nil
}

// ResetPublish resets all changes to the "publish" field.
func (m *RecreationMutation) ResetPublish() {
	m.publish = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RecreationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RecreationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RecreationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RecreationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RecreationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Recreation entity.
// If the Recreation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecreationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RecreationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetProfileID sets the "profile" edge to the Profile entity by id.
func (m *RecreationMutation) SetProfileID(id int) {
	m.profile = &id
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (m *RecreationMutation) ClearProfile() {
	m.clearedprofile = true
}

// ProfileCleared reports if the "profile" edge to the Profile entity was cleared.
func (m *RecreationMutation) ProfileCleared() bool {
	return m.clearedprofile
}

// ProfileID returns the "profile" edge ID in the mutation.
func (m *RecreationMutation) ProfileID() (id int, exists bool) {
	if m.profile != nil {
		return *m.profile, true
	}
	return
}

// ProfileIDs returns the "profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfileID instead. It exists only for internal usage by the builders.
func (m *RecreationMutation) ProfileIDs() (ids []int) {
	if id := m.profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfile resets all changes to the "profile" edge.
func (m *RecreationMutation) ResetProfile() {
	m.profile = nil
	m.clearedprofile = false
}

// Where appends a list predicates to the RecreationMutation builder.
func (m *RecreationMutation) Where(ps ...predicate.Recreation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RecreationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RecreationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Recreation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RecreationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RecreationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Recreation).
func (m *RecreationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecreationMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.user_id != nil {
		fields = append(fields, recreation.FieldUserID)
	}
	if m.recreation_id != nil {
		fields = append(fields, recreation.FieldRecreationID)
	}
	if m.genre != nil {
		fields = append(fields, recreation.FieldGenre)
	}
	if m.title != nil {
		fields = append(fields, recreation.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, recreation.FieldContent)
	}
	if m.youtube_id != nil {
		fields = append(fields, recreation.FieldYoutubeID)
	}
	if m.target_number != nil {
		fields = append(fields, recreation.FieldTargetNumber)
	}
	if m.required_time != nil {
		fields = append(fields, recreation.FieldRequiredTime)
	}
	if m.publish != nil {
		fields = append(fields, recreation.FieldPublish)
	}
	if m.created_at != nil {
		fields = append(fields, recreation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, recreation.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecreationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recreation.FieldUserID:
		return m.UserID()
	case recreation.FieldRecreationID:
		return m.RecreationID()
	case recreation.FieldGenre:
		return m.Genre()
	case recreation.FieldTitle:
		return m.Title()
	case recreation.FieldContent:
		return m.Content()
	case recreation.FieldYoutubeID:
		return m.YoutubeID()
	case recreation.FieldTargetNumber:
		return m.TargetNumber()
	case recreation.FieldRequiredTime:
		return m.RequiredTime()
	case recreation.FieldPublish:
		return m.Publish()
	case recreation.FieldCreatedAt:
		return m.CreatedAt()
	case recreation.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecreationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recreation.FieldUserID:
		return m.OldUserID(ctx)
	case recreation.FieldRecreationID:
		return m.OldRecreationID(ctx)
	case recreation.FieldGenre:
		return m.OldGenre(ctx)
	case recreation.FieldTitle:
		return m.OldTitle(ctx)
	case recreation.FieldContent:
		return m.OldContent(ctx)
	case recreation.FieldYoutubeID:
		return m.OldYoutubeID(ctx)
	case recreation.FieldTargetNumber:
		return m.OldTargetNumber(ctx)
	case recreation.FieldRequiredTime:
		return m.OldRequiredTime(ctx)
	case recreation.FieldPublish:
		return m.OldPublish(ctx)
	case recreation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case recreation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Recreation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecreationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recreation.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case recreation.FieldRecreationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecreationID(v)
		return nil
	case recreation.FieldGenre:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenre(v)
		return nil
	case recreation.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case recreation.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case recreation.FieldYoutubeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYoutubeID(v)
		return nil
	case recreation.FieldTargetNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetNumber(v)
		return nil
	case recreation.FieldRequiredTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequiredTime(v)
		return nil
	case recreation.FieldPublish:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublish(v)
		return nil
	case recreation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case recreation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Recreation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecreationMutation) AddedFields() []string {
	var fields []string
	if m.addtarget_number != nil {
		fields = append(fields, recreation.FieldTargetNumber)
	}
	if m.addrequired_time != nil {
		fields = append(fields, recreation.FieldRequiredTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecreationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case recreation.FieldTargetNumber:
		return m.AddedTargetNumber()
	case recreation.FieldRequiredTime:
		return m.AddedRequiredTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecreationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case recreation.FieldTargetNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTargetNumber(v)
		return nil
	case recreation.FieldRequiredTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRequiredTime(v)
		return nil
	}
	return fmt.Errorf("unknown Recreation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecreationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(recreation.FieldYoutubeID) {
		fields = append(fields, recreation.FieldYoutubeID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecreationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecreationMutation) ClearField(name string) error {
	switch name {
	case recreation.FieldYoutubeID:
		m.ClearYoutubeID()
		return nil
	}
	return fmt.Errorf("unknown Recreation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecreationMutation) ResetField(name string) error {
	switch name {
	case recreation.FieldUserID:
		m.ResetUserID()
		return nil
	case recreation.FieldRecreationID:
		m.ResetRecreationID()
		return nil
	case recreation.FieldGenre:
		m.ResetGenre()
		return nil
	case recreation.FieldTitle:
		m.ResetTitle()
		return nil
	case recreation.FieldContent:
		m.ResetContent()
		return nil
	case recreation.FieldYoutubeID:
		m.ResetYoutubeID()
		return nil
	case recreation.FieldTargetNumber:
		m.ResetTargetNumber()
		return nil
	case recreation.FieldRequiredTime:
		m.ResetRequiredTime()
		return nil
	case recreation.FieldPublish:
		m.ResetPublish()
		return nil
	case recreation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case recreation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Recreation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecreationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.profile != nil {
		edges = append(edges, recreation.EdgeProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecreationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recreation.EdgeProfile:
		if id := m.profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecreationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecreationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecreationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprofile {
		edges = append(edges, recreation.EdgeProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecreationMutation) EdgeCleared(name string) bool {
	switch name {
	case recreation.EdgeProfile:
		return m.clearedprofile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecreationMutation) ClearEdge(name string) error {
	switch name {
	case recreation.EdgeProfile:
		m.ClearProfile()
		return nil
	}
	return fmt.Errorf("unknown Recreation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecreationMutation) ResetEdge(name string) error {
	switch name {
	case recreation.EdgeProfile:
		m.ResetProfile()
		return nil
	}
	return fmt.Errorf("unknown Recreation edge %s", name)
}
