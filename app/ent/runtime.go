// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/prefecture"
	"app/ent/schema"
	"app/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	prefectureFields := schema.Prefecture{}.Fields()
	_ = prefectureFields
	// prefectureDescCreatedAt is the schema descriptor for created_at field.
	prefectureDescCreatedAt := prefectureFields[1].Descriptor()
	// prefecture.DefaultCreatedAt holds the default value on creation for the created_at field.
	prefecture.DefaultCreatedAt = prefectureDescCreatedAt.Default.(func() time.Time)
	// prefectureDescUpdatedAt is the schema descriptor for updated_at field.
	prefectureDescUpdatedAt := prefectureFields[2].Descriptor()
	// prefecture.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	prefecture.DefaultUpdatedAt = prefectureDescUpdatedAt.Default.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[3].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
}
