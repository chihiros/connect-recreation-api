// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/recreation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Recreation is the model entity for the Recreation schema.
type Recreation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Mail holds the value of the "mail" field.
	Mail string `json:"mail,omitempty"`
	// PrefectureID holds the value of the "prefecture_id" field.
	PrefectureID *int `json:"prefecture_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recreation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recreation.FieldID, recreation.FieldPrefectureID:
			values[i] = new(sql.NullInt64)
		case recreation.FieldUID, recreation.FieldUsername, recreation.FieldMail:
			values[i] = new(sql.NullString)
		case recreation.FieldCreatedAt, recreation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recreation fields.
func (r *Recreation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recreation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case recreation.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				r.UID = value.String
			}
		case recreation.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				r.Username = value.String
			}
		case recreation.FieldMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mail", values[i])
			} else if value.Valid {
				r.Mail = value.String
			}
		case recreation.FieldPrefectureID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prefecture_id", values[i])
			} else if value.Valid {
				r.PrefectureID = new(int)
				*r.PrefectureID = int(value.Int64)
			}
		case recreation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case recreation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Recreation.
// This includes values selected through modifiers, order, etc.
func (r *Recreation) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Recreation.
// Note that you need to call Recreation.Unwrap() before calling this method if this Recreation
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recreation) Update() *RecreationUpdateOne {
	return NewRecreationClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Recreation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recreation) Unwrap() *Recreation {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recreation is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recreation) String() string {
	var builder strings.Builder
	builder.WriteString("Recreation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("uid=")
	builder.WriteString(r.UID)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(r.Username)
	builder.WriteString(", ")
	builder.WriteString("mail=")
	builder.WriteString(r.Mail)
	builder.WriteString(", ")
	if v := r.PrefectureID; v != nil {
		builder.WriteString("prefecture_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Recreations is a parsable slice of Recreation.
type Recreations []*Recreation
