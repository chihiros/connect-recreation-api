// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/recreation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RecreationCreate is the builder for creating a Recreation entity.
type RecreationCreate struct {
	config
	mutation *RecreationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (rc *RecreationCreate) SetUserID(u uuid.UUID) *RecreationCreate {
	rc.mutation.SetUserID(u)
	return rc
}

// SetUUID sets the "uuid" field.
func (rc *RecreationCreate) SetUUID(u uuid.UUID) *RecreationCreate {
	rc.mutation.SetUUID(u)
	return rc
}

// SetGenre sets the "genre" field.
func (rc *RecreationCreate) SetGenre(s []string) *RecreationCreate {
	rc.mutation.SetGenre(s)
	return rc
}

// SetTitle sets the "title" field.
func (rc *RecreationCreate) SetTitle(s string) *RecreationCreate {
	rc.mutation.SetTitle(s)
	return rc
}

// SetContent sets the "content" field.
func (rc *RecreationCreate) SetContent(s string) *RecreationCreate {
	rc.mutation.SetContent(s)
	return rc
}

// SetTargetNumber sets the "target_number" field.
func (rc *RecreationCreate) SetTargetNumber(i int) *RecreationCreate {
	rc.mutation.SetTargetNumber(i)
	return rc
}

// SetRequredTime sets the "requred_time" field.
func (rc *RecreationCreate) SetRequredTime(i int) *RecreationCreate {
	rc.mutation.SetRequredTime(i)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RecreationCreate) SetCreatedAt(t time.Time) *RecreationCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RecreationCreate) SetNillableCreatedAt(t *time.Time) *RecreationCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RecreationCreate) SetUpdatedAt(t time.Time) *RecreationCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RecreationCreate) SetNillableUpdatedAt(t *time.Time) *RecreationCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// Mutation returns the RecreationMutation object of the builder.
func (rc *RecreationCreate) Mutation() *RecreationMutation {
	return rc.mutation
}

// Save creates the Recreation in the database.
func (rc *RecreationCreate) Save(ctx context.Context) (*Recreation, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecreationCreate) SaveX(ctx context.Context) *Recreation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RecreationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RecreationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RecreationCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := recreation.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := recreation.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecreationCreate) check() error {
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Recreation.user_id"`)}
	}
	if _, ok := rc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Recreation.uuid"`)}
	}
	if _, ok := rc.mutation.Genre(); !ok {
		return &ValidationError{Name: "genre", err: errors.New(`ent: missing required field "Recreation.genre"`)}
	}
	if _, ok := rc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Recreation.title"`)}
	}
	if _, ok := rc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Recreation.content"`)}
	}
	if _, ok := rc.mutation.TargetNumber(); !ok {
		return &ValidationError{Name: "target_number", err: errors.New(`ent: missing required field "Recreation.target_number"`)}
	}
	if _, ok := rc.mutation.RequredTime(); !ok {
		return &ValidationError{Name: "requred_time", err: errors.New(`ent: missing required field "Recreation.requred_time"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Recreation.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Recreation.updated_at"`)}
	}
	return nil
}

func (rc *RecreationCreate) sqlSave(ctx context.Context) (*Recreation, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RecreationCreate) createSpec() (*Recreation, *sqlgraph.CreateSpec) {
	var (
		_node = &Recreation{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(recreation.Table, sqlgraph.NewFieldSpec(recreation.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.UserID(); ok {
		_spec.SetField(recreation.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if value, ok := rc.mutation.UUID(); ok {
		_spec.SetField(recreation.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := rc.mutation.Genre(); ok {
		_spec.SetField(recreation.FieldGenre, field.TypeJSON, value)
		_node.Genre = value
	}
	if value, ok := rc.mutation.Title(); ok {
		_spec.SetField(recreation.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rc.mutation.Content(); ok {
		_spec.SetField(recreation.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := rc.mutation.TargetNumber(); ok {
		_spec.SetField(recreation.FieldTargetNumber, field.TypeInt, value)
		_node.TargetNumber = value
	}
	if value, ok := rc.mutation.RequredTime(); ok {
		_spec.SetField(recreation.FieldRequredTime, field.TypeInt, value)
		_node.RequredTime = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(recreation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(recreation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Recreation.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecreationUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (rc *RecreationCreate) OnConflict(opts ...sql.ConflictOption) *RecreationUpsertOne {
	rc.conflict = opts
	return &RecreationUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Recreation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RecreationCreate) OnConflictColumns(columns ...string) *RecreationUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RecreationUpsertOne{
		create: rc,
	}
}

type (
	// RecreationUpsertOne is the builder for "upsert"-ing
	//  one Recreation node.
	RecreationUpsertOne struct {
		create *RecreationCreate
	}

	// RecreationUpsert is the "OnConflict" setter.
	RecreationUpsert struct {
		*sql.UpdateSet
	}
)

// SetGenre sets the "genre" field.
func (u *RecreationUpsert) SetGenre(v []string) *RecreationUpsert {
	u.Set(recreation.FieldGenre, v)
	return u
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *RecreationUpsert) UpdateGenre() *RecreationUpsert {
	u.SetExcluded(recreation.FieldGenre)
	return u
}

// SetTitle sets the "title" field.
func (u *RecreationUpsert) SetTitle(v string) *RecreationUpsert {
	u.Set(recreation.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RecreationUpsert) UpdateTitle() *RecreationUpsert {
	u.SetExcluded(recreation.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *RecreationUpsert) SetContent(v string) *RecreationUpsert {
	u.Set(recreation.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RecreationUpsert) UpdateContent() *RecreationUpsert {
	u.SetExcluded(recreation.FieldContent)
	return u
}

// SetTargetNumber sets the "target_number" field.
func (u *RecreationUpsert) SetTargetNumber(v int) *RecreationUpsert {
	u.Set(recreation.FieldTargetNumber, v)
	return u
}

// UpdateTargetNumber sets the "target_number" field to the value that was provided on create.
func (u *RecreationUpsert) UpdateTargetNumber() *RecreationUpsert {
	u.SetExcluded(recreation.FieldTargetNumber)
	return u
}

// AddTargetNumber adds v to the "target_number" field.
func (u *RecreationUpsert) AddTargetNumber(v int) *RecreationUpsert {
	u.Add(recreation.FieldTargetNumber, v)
	return u
}

// SetRequredTime sets the "requred_time" field.
func (u *RecreationUpsert) SetRequredTime(v int) *RecreationUpsert {
	u.Set(recreation.FieldRequredTime, v)
	return u
}

// UpdateRequredTime sets the "requred_time" field to the value that was provided on create.
func (u *RecreationUpsert) UpdateRequredTime() *RecreationUpsert {
	u.SetExcluded(recreation.FieldRequredTime)
	return u
}

// AddRequredTime adds v to the "requred_time" field.
func (u *RecreationUpsert) AddRequredTime(v int) *RecreationUpsert {
	u.Add(recreation.FieldRequredTime, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecreationUpsert) SetUpdatedAt(v time.Time) *RecreationUpsert {
	u.Set(recreation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecreationUpsert) UpdateUpdatedAt() *RecreationUpsert {
	u.SetExcluded(recreation.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Recreation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RecreationUpsertOne) UpdateNewValues() *RecreationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(recreation.FieldUserID)
		}
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(recreation.FieldUUID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(recreation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Recreation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RecreationUpsertOne) Ignore() *RecreationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecreationUpsertOne) DoNothing() *RecreationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecreationCreate.OnConflict
// documentation for more info.
func (u *RecreationUpsertOne) Update(set func(*RecreationUpsert)) *RecreationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecreationUpsert{UpdateSet: update})
	}))
	return u
}

// SetGenre sets the "genre" field.
func (u *RecreationUpsertOne) SetGenre(v []string) *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.SetGenre(v)
	})
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *RecreationUpsertOne) UpdateGenre() *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateGenre()
	})
}

// SetTitle sets the "title" field.
func (u *RecreationUpsertOne) SetTitle(v string) *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RecreationUpsertOne) UpdateTitle() *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *RecreationUpsertOne) SetContent(v string) *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RecreationUpsertOne) UpdateContent() *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateContent()
	})
}

// SetTargetNumber sets the "target_number" field.
func (u *RecreationUpsertOne) SetTargetNumber(v int) *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.SetTargetNumber(v)
	})
}

// AddTargetNumber adds v to the "target_number" field.
func (u *RecreationUpsertOne) AddTargetNumber(v int) *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.AddTargetNumber(v)
	})
}

// UpdateTargetNumber sets the "target_number" field to the value that was provided on create.
func (u *RecreationUpsertOne) UpdateTargetNumber() *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateTargetNumber()
	})
}

// SetRequredTime sets the "requred_time" field.
func (u *RecreationUpsertOne) SetRequredTime(v int) *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.SetRequredTime(v)
	})
}

// AddRequredTime adds v to the "requred_time" field.
func (u *RecreationUpsertOne) AddRequredTime(v int) *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.AddRequredTime(v)
	})
}

// UpdateRequredTime sets the "requred_time" field to the value that was provided on create.
func (u *RecreationUpsertOne) UpdateRequredTime() *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateRequredTime()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecreationUpsertOne) SetUpdatedAt(v time.Time) *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecreationUpsertOne) UpdateUpdatedAt() *RecreationUpsertOne {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *RecreationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RecreationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecreationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RecreationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RecreationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RecreationCreateBulk is the builder for creating many Recreation entities in bulk.
type RecreationCreateBulk struct {
	config
	builders []*RecreationCreate
	conflict []sql.ConflictOption
}

// Save creates the Recreation entities in the database.
func (rcb *RecreationCreateBulk) Save(ctx context.Context) ([]*Recreation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Recreation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecreationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RecreationCreateBulk) SaveX(ctx context.Context) []*Recreation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RecreationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RecreationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Recreation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecreationUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (rcb *RecreationCreateBulk) OnConflict(opts ...sql.ConflictOption) *RecreationUpsertBulk {
	rcb.conflict = opts
	return &RecreationUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Recreation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RecreationCreateBulk) OnConflictColumns(columns ...string) *RecreationUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RecreationUpsertBulk{
		create: rcb,
	}
}

// RecreationUpsertBulk is the builder for "upsert"-ing
// a bulk of Recreation nodes.
type RecreationUpsertBulk struct {
	create *RecreationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Recreation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RecreationUpsertBulk) UpdateNewValues() *RecreationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(recreation.FieldUserID)
			}
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(recreation.FieldUUID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(recreation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Recreation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RecreationUpsertBulk) Ignore() *RecreationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecreationUpsertBulk) DoNothing() *RecreationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecreationCreateBulk.OnConflict
// documentation for more info.
func (u *RecreationUpsertBulk) Update(set func(*RecreationUpsert)) *RecreationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecreationUpsert{UpdateSet: update})
	}))
	return u
}

// SetGenre sets the "genre" field.
func (u *RecreationUpsertBulk) SetGenre(v []string) *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.SetGenre(v)
	})
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *RecreationUpsertBulk) UpdateGenre() *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateGenre()
	})
}

// SetTitle sets the "title" field.
func (u *RecreationUpsertBulk) SetTitle(v string) *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *RecreationUpsertBulk) UpdateTitle() *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *RecreationUpsertBulk) SetContent(v string) *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *RecreationUpsertBulk) UpdateContent() *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateContent()
	})
}

// SetTargetNumber sets the "target_number" field.
func (u *RecreationUpsertBulk) SetTargetNumber(v int) *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.SetTargetNumber(v)
	})
}

// AddTargetNumber adds v to the "target_number" field.
func (u *RecreationUpsertBulk) AddTargetNumber(v int) *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.AddTargetNumber(v)
	})
}

// UpdateTargetNumber sets the "target_number" field to the value that was provided on create.
func (u *RecreationUpsertBulk) UpdateTargetNumber() *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateTargetNumber()
	})
}

// SetRequredTime sets the "requred_time" field.
func (u *RecreationUpsertBulk) SetRequredTime(v int) *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.SetRequredTime(v)
	})
}

// AddRequredTime adds v to the "requred_time" field.
func (u *RecreationUpsertBulk) AddRequredTime(v int) *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.AddRequredTime(v)
	})
}

// UpdateRequredTime sets the "requred_time" field to the value that was provided on create.
func (u *RecreationUpsertBulk) UpdateRequredTime() *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateRequredTime()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecreationUpsertBulk) SetUpdatedAt(v time.Time) *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecreationUpsertBulk) UpdateUpdatedAt() *RecreationUpsertBulk {
	return u.Update(func(s *RecreationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *RecreationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RecreationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RecreationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecreationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
